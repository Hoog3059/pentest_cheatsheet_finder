"""Cheatsheet finder. Find information about pentesting tools and methods.
By Hoog3059 (Timo Hoogenbosch) @ Github
https://hoog3059.pythonanywhere.com/

Usage:
    cheatsheet <query> [--verbose]
    cheatsheet --verbose
    cheatsheet (-h | --help)
    cheatsheet --version
    cheatsheet --update
    cheatsheet --rebuild

Options:
    -h --help   Show this screen.
    --version   Show the current version.
    --update    Update the cheatsheet database.
    --rebuild   Rebuild the cheatsheet database.
    --verbose   Verbose. If no query given, ask the user.
"""
import json
import re
import os
from collections import defaultdict

from colorama import init, Fore, Style
from docopt import docopt


def search(search_query):
    search_query_list = search_query.split(" ")
    search_query_list_sanitized = [sanitize(query) for query in search_query_list]

    print("Loading database...")
    with open("cheatsheet_db.json", "r") as file:
        database = json.loads(file.read())

    search_success = []
    for entry in database:
        entry_sanitized = sanitize_entry(entry)

        comparison_result_list = []
        for query in search_query_list_sanitized:
            if (query in entry_sanitized[0]) or (query in entry_sanitized[1]) or (query in entry_sanitized[2]):
                comparison_result_list.append(True)
            else:
                comparison_result_list.append(False)

        if all(comparison_result_list):
            search_success.append(entry)

    print_results(search_success, search_query_list)


def print_results(entries, query_list):
    output = "Results:\n"
    used_filepaths = []

    sorted_by_category = defaultdict(lambda: list())
    for entry in entries:
        sorted_by_category[entry[0]].append([entry[1], entry[2]])

    for category_name in sorted_by_category:
        output += "\n# {}\n".format(category_name)
        relative_filepath = "cheatsheets/Cheatsheet_{}.txt".format(category_name)
        used_filepaths.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), relative_filepath))

        for description, command in sorted_by_category[category_name]:
            prefix_description = "    {}:".format(description)

            indent = ' '*len(prefix_description)
            command = command.replace("\n", "\n{}".format(indent))

            output += prefix_description
            output += "{}\n".format(command)

    for query in query_list:
        output = replace_keep_case(query, "%%color%%{}%%reset%%".format(query), output)
    output = re.sub("%%color%%", Fore.RED, output, 0, re.I | re.M)
    output = re.sub("%%reset%%", Style.RESET_ALL, output, 0, re.I | re.M)
    output += "\n{}".format('\n'.join(used_filepaths))
    print(output)


def replace_keep_case(word, replacement, text):
    def check_case(match):
        g = match.group()
        if g.islower(): return replacement.lower()
        if g.istitle(): return replacement.title()
        if g.isupper(): return replacement.upper()
        return replacement
    return re.sub(word, check_case, text, 0, re.M | re.I)


def sanitize_entry(input):
    output = []
    for entry_item in input:
        output.append(sanitize(entry_item))
    return output


def sanitize(input):
    return re.sub(r"[^0-9a-zA-Z]+", "", input.lower(), 0, re.MULTILINE)


def update():
    print("Updating... This may take a while...")
    os.mkdir("cheatsheets_download")
    print("Created folder cheatsheet_downloads...")
    print("Attempting to download files...")
    print("Failed: not implemented!")
    exit(0)
    print("Building new database from 'cheatsheets'...")
    build_database("cheatsheets")


def build_database(directory):
    new_database = []
    cheatsheet_files = []

    print("Scanning files in 'cheatsheets'...")
    with os.scandir(directory) as dir_scanner:
        for entry in dir_scanner:
            if entry.name.startswith("Cheatsheet_") and entry.is_file():
                cheatsheet_files.append(entry)

    print("Found files. Building database...")
    for cheatsheet_file in cheatsheet_files:
        # Get everything between 'Cheatsheet_' and '.txt'
        category = cheatsheet_file.name[11:-4]
        description = ""
        command = ""

        with open(cheatsheet_file.path, "r") as file:
            lines = file.readlines()
            for i, line in enumerate(lines):
                if line.startswith("[+] "):
                    description = line[4:].replace("\n", "")
                    continue
                if description:
                    command += line
                if i + 1 >= len(lines):
                    new_database.append([category, description, command])
                    description = ""
                    command = ""
                    break
                if lines[i+1].startswith("[+] "):
                    new_database.append([category, description, command])
                    description = ""
                    command = ""
                    continue

    print("Building database successful! Writing to 'cheatsheet_db.json'...")
    with open("cheatsheet_db.json", "w") as file:
        json_data = json.dumps(new_database)
        file.writelines(json_data)

    print("Success! Exiting...")
    exit(0)


if __name__ == "__main__":
    # Colorama init
    init()

    # Docopt argument parsing
    arguments = docopt(__doc__, version="Cheatsheet finder 1.0.0")

    if arguments["<query>"]:
        search(arguments["<query>"])
    elif not arguments["<query>"] and arguments["--verbose"]:
        search_query = input("Query: ")
        search(search_query)

    if arguments["--update"]:
        update()

    if arguments["--rebuild"]:
        build_database("cheatsheets")
